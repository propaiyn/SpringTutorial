Java Springboot
----------------------------------------------------------------
Introduction
----------------------------------------------------------------
- Springboot is a framework which gives you what you need to create a application
- Can connect to DB, log, inject, make microservices
    - API: Receives GET, POST, PUT AND DELETE requests
    - Service layer: Business logic
    - Data access layer: Responsible for connecting to databases
    - Below this = database layer
- Spring initializr =websiteto quickstart with boilerplate

----------------------------------------------------------------
Springboot steps
----------------------------------------------------------------
1. Use springboot initializer
   // Gives starter package to create spring application

application.properties file is for configuration,environment specific properties
static and templates are for html, css web development

test folder for unit and integration tests

pom.xml specifies java version, configuration and dependencies

spring is built on tomcat web server by default on port 8080

----------------------------------------------------------------
APP STEPS
----------------------------------------------------------------
1. Use springboot initializer
2. Add dependencies
3. import project
4. REST controller setup (in its own class)

Best practice to put the rest controller in its own package

----------------------------------------------------------------
API LAYER
----------------------------------------------------------------
- LOOK AT STUDENT CONTROLLER

----------------------------------------------------------------
SERVICE LAYER (Business logic)
----------------------------------------------------------------
- API layer should talk to the service layer  to get some data
- Service layer should communicate with data access layer to get data (round trip)
-

----------------------------------------------------------------
ANNOTATIONS
----------------------------------------------------------------
-@Component is exact same but @Service is more readable

----------------------------------------------------------------
DEPENDENCY INJECTION
----------------------------------------------------------------
- Try and use dependency injection as much as possible
- @Service and @Autowired were used to inject dependencies and
separate API and Service layers
    - API layer and Service layers communicate and service layer -> data -> API

----------------------------------------------------------------
DATA ACCESS LAYER (DB)
----------------------------------------------------------------
- Application.properties
    - Database configs
        - create-drop = clean state every time its run
- Terminal from postgres, CREATE DATABASE (database name)
    - \du shows roles and attributes
    - GRANT ALL PRIVILEGES ON DATABASE "student" to "Hassan";
    - GRANT ALL PRIVILEGES ON DATABASE "student" to postgres;
    - \c to connect, \d relations
- Sequence generator = sequence student_sequence
    - Starts at one and increments (Through allocation size) by one
- Create table statement in terminal:
    - CREATE TABLE "student" with all the fields, PK is ID

----------------------------------------------------------------
Postman
----------------------------------------------------------------
-

----------------------------------------------------------------
TIPS
----------------------------------------------------------------
cmd + / comments lines out